{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useAssets = useAssets;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _Asset = require(\"./Asset\");\n\nfunction useAssets(moduleIds) {\n  var _useState = (0, _react.useState)(),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      assets = _useState2[0],\n      setAssets = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  (0, _react.useEffect)(function () {\n    _Asset.Asset.loadAsync(moduleIds).then(setAssets).catch(setError);\n  }, []);\n  return [assets, error];\n}","map":{"version":3,"sources":["../src/AssetHooks.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;AAEA;;AAiBM,SAAU,SAAV,CAAoB,SAApB,EAAgD;AAAA,kBACxB,sBADwB;AAAA;AAAA,MAC7C,MAD6C;AAAA,MACrC,SADqC;;AAAA,mBAE1B,sBAF0B;AAAA;AAAA,MAE7C,KAF6C;AAAA,MAEtC,QAFsC;;AAIpD,wBAAU,YAAK;AACb,iBAAM,SAAN,CAAgB,SAAhB,EACG,IADH,CACQ,SADR,EAEG,KAFH,CAES,QAFT;AAGD,GAJD,EAIG,EAJH;AAMA,SAAO,CAAC,MAAD,EAAS,KAAT,CAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { Asset } from './Asset';\n\n/**\n * Downloads and stores one or more assets locally.\n * After the assets are loaded, this hook returns a list of asset instances.\n * If something went wrong when loading the assets, an error is returned.\n *\n * Note, the assets are not \"reloaded\" when you dynamically change the asset list.\n *\n * @see https://docs.expo.io/versions/latest/sdk/asset/\n * @example\n * ```tsx\n * const [assets, error] = useAssets(require('path/to/asset.jpg'));\n *\n * return !assets ? null : <Image source={assets[0]} />;\n * ```\n */\nexport function useAssets(moduleIds: number | number[]): [Asset[] | undefined, Error | undefined] {\n  const [assets, setAssets] = useState<Asset[]>();\n  const [error, setError] = useState<Error>();\n\n  useEffect(() => {\n    Asset.loadAsync(moduleIds)\n      .then(setAssets)\n      .catch(setError);\n  }, []);\n\n  return [assets, error];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}