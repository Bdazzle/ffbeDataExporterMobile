{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar AccessToken = require('react-native').NativeModules.FBAccessToken;\n\nvar NativeEventEmitter = require('react-native').NativeEventEmitter;\n\nvar eventEmitter = new NativeEventEmitter(AccessToken);\n\nvar FBAccessToken = function () {\n  function FBAccessToken(tokenMap) {\n    (0, _classCallCheck2.default)(this, FBAccessToken);\n    (0, _defineProperty2.default)(this, \"accessToken\", void 0);\n    (0, _defineProperty2.default)(this, \"permissions\", void 0);\n    (0, _defineProperty2.default)(this, \"declinedPermissions\", void 0);\n    (0, _defineProperty2.default)(this, \"expiredPermissions\", void 0);\n    (0, _defineProperty2.default)(this, \"applicationID\", void 0);\n    (0, _defineProperty2.default)(this, \"userID\", void 0);\n    (0, _defineProperty2.default)(this, \"expirationTime\", void 0);\n    (0, _defineProperty2.default)(this, \"lastRefreshTime\", void 0);\n    (0, _defineProperty2.default)(this, \"dataAccessExpirationTime\", void 0);\n    (0, _defineProperty2.default)(this, \"accessTokenSource\", void 0);\n    this.accessToken = tokenMap.accessToken;\n    this.permissions = tokenMap.permissions;\n    this.declinedPermissions = tokenMap.declinedPermissions;\n    this.expiredPermissions = tokenMap.expiredPermissions;\n    this.applicationID = tokenMap.applicationID;\n    this.userID = tokenMap.userID;\n    this.expirationTime = tokenMap.expirationTime;\n    this.lastRefreshTime = tokenMap.lastRefreshTime;\n    this.dataAccessExpirationTime = tokenMap.dataAccessExpirationTime;\n    this.accessTokenSource = tokenMap.accessTokenSource;\n    Object.freeze(this);\n  }\n\n  (0, _createClass2.default)(FBAccessToken, [{\n    key: \"getExpires\",\n    value: function getExpires() {\n      return this.expirationTime;\n    }\n  }, {\n    key: \"getPermissions\",\n    value: function getPermissions() {\n      return this.permissions;\n    }\n  }, {\n    key: \"getDeclinedPermissions\",\n    value: function getDeclinedPermissions() {\n      return this.declinedPermissions;\n    }\n  }, {\n    key: \"getExpiredPermissions\",\n    value: function getExpiredPermissions() {\n      return this.expiredPermissions;\n    }\n  }, {\n    key: \"getLastRefresh\",\n    value: function getLastRefresh() {\n      return this.lastRefreshTime;\n    }\n  }, {\n    key: \"getDataAccessExpiration\",\n    value: function getDataAccessExpiration() {\n      return this.dataAccessExpirationTime;\n    }\n  }, {\n    key: \"getApplicationId\",\n    value: function getApplicationId() {\n      return this.applicationID;\n    }\n  }, {\n    key: \"getUserId\",\n    value: function getUserId() {\n      return this.userID;\n    }\n  }], [{\n    key: \"getCurrentAccessToken\",\n    value: function getCurrentAccessToken() {\n      return new Promise(function (resolve, reject) {\n        AccessToken.getCurrentAccessToken(function (tokenMap) {\n          if (tokenMap) {\n            resolve(new FBAccessToken(tokenMap));\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"setCurrentAccessToken\",\n    value: function setCurrentAccessToken(accessToken) {\n      AccessToken.setCurrentAccessToken(accessToken);\n    }\n  }, {\n    key: \"refreshCurrentAccessTokenAsync\",\n    value: function refreshCurrentAccessTokenAsync() {\n      return AccessToken.refreshCurrentAccessTokenAsync();\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(listener) {\n      var subscription = eventEmitter.addListener('fbsdk.accessTokenDidChange', function (tokenMap) {\n        if (tokenMap) {\n          listener(new FBAccessToken(tokenMap));\n        } else {\n          listener(null);\n        }\n      });\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }]);\n  return FBAccessToken;\n}();\n\nmodule.exports = FBAccessToken;","map":{"version":3,"sources":["FBAccessToken.js"],"names":["AccessToken","require","NativeEventEmitter","eventEmitter","FBAccessToken","tokenMap","Object","resolve","accessToken","listener","subscription","module"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst AccessToken = require('react-native').NativeModules.FBAccessToken;\n\nconst NativeEventEmitter = require('react-native').NativeEventEmitter;\nconst eventEmitter = new NativeEventEmitter(AccessToken);\n\ntype AccessTokenMap = {\n  accessToken: string,\n  permissions: Array<string>,\n  declinedPermissions: Array<string>,\n  expiredPermissions: Array<string>,\n  applicationID: string,\n  userID: string,\n  expirationTime: number,\n  lastRefreshTime: number,\n  dataAccessExpirationTime: number,\n  accessTokenSource?: string,\n};\n\n/**\n * Represents an immutable access token for using Facebook services.\n */\nclass FBAccessToken {\n  /**\n   * The access token string.\n   */\n  accessToken: string;\n\n  /**\n   * The known granted permissions.\n   */\n  permissions: Array<string>;\n\n  /**\n   * The known declined permissions.\n   */\n  declinedPermissions: Array<string>;\n\n  /**\n   * The known expired permissions.\n   */\n  expiredPermissions: Array<string>;\n\n  /**\n   * The app ID.\n   */\n  applicationID: string;\n\n  /**\n   * The user ID.\n   */\n  userID: string;\n\n  /**\n   * The expiration time of the access token.\n   * The value is the number of milliseconds since Jan. 1, 1970, midnight GMT.\n   */\n  expirationTime: number;\n\n  /**\n   * The last refresh time of the access token.\n   * The value is the number of milliseconds since Jan. 1, 1970, midnight GMT.\n   */\n  lastRefreshTime: number;\n\n  /**\n   * The data access expiration time of the access token.\n   * The value is the number of milliseconds since Jan. 1, 1970, midnight GMT.\n   */\n  dataAccessExpirationTime: number;\n\n  /**\n   * The source of access token.\n   * @platform android\n   */\n  accessTokenSource: ?string;\n\n  constructor(tokenMap: AccessTokenMap) {\n    this.accessToken = tokenMap.accessToken;\n    this.permissions = tokenMap.permissions;\n    this.declinedPermissions = tokenMap.declinedPermissions;\n    this.expiredPermissions = tokenMap.expiredPermissions;\n    this.applicationID = tokenMap.applicationID;\n    this.userID = tokenMap.userID;\n    this.expirationTime = tokenMap.expirationTime;\n    this.lastRefreshTime = tokenMap.lastRefreshTime;\n    this.dataAccessExpirationTime = tokenMap.dataAccessExpirationTime;\n    this.accessTokenSource = tokenMap.accessTokenSource;\n    Object.freeze(this);\n  }\n\n  /**\n   * Getter for the access token that is current for the application.\n   */\n  static getCurrentAccessToken(): Promise<?FBAccessToken> {\n    return new Promise((resolve, reject) => {\n      AccessToken.getCurrentAccessToken((tokenMap) => {\n        if (tokenMap) {\n          resolve(new FBAccessToken(tokenMap));\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  }\n\n  /**\n   * Setter for the access token that is current for the application.\n   */\n  static setCurrentAccessToken(accessToken: AccessTokenMap) {\n    AccessToken.setCurrentAccessToken(accessToken);\n  }\n\n  /**\n   * Updates the current access token with up to date permissions,\n   * and extends the expiration date, if extension is possible.\n   */\n  static refreshCurrentAccessTokenAsync(): Promise<any> {\n    return AccessToken.refreshCurrentAccessTokenAsync();\n  }\n\n  /**\n   * Adds a listener for when the access token changes. Returns a functions which removes the\n   * listener when called.\n   */\n  static addListener(\n    listener: (accessToken: ?FBAccessToken) => void,\n  ): () => void {\n    const subscription = eventEmitter.addListener(\n      'fbsdk.accessTokenDidChange',\n      (tokenMap: AccessTokenMap) => {\n        if (tokenMap) {\n          listener(new FBAccessToken(tokenMap));\n        } else {\n          listener(null);\n        }\n      },\n    );\n    return () => subscription.remove();\n  }\n\n  /**\n   * Gets the date at which the access token expires. The value is the number of\n   * milliseconds since Jan. 1, 1970, midnight GMT.\n   */\n  getExpires(): number {\n    return this.expirationTime;\n  }\n\n  /**\n   * Get the list of permissions associated with this access token. Note that the most up-to-date\n   * list of permissions is maintained by Facebook, so this list may be outdated if permissions\n   * have been added or removed since the time the AccessToken object was created. See\n   * https://developers.facebook.com/docs/reference/login/#permissions for details.\n   */\n  getPermissions(): Array<string> {\n    return this.permissions;\n  }\n\n  /**\n   * Gets the list of permissions declined by the user with this access token. It represents the\n   * entire set of permissions that have been requested and declined. Note that the most\n   * up-to-date list of permissions is maintained by Facebook, so this list may be outdated if\n   * permissions have been granted or declined since the last time an AccessToken object was\n   * created. See https://developers.facebook.com/docs/reference/login/#permissions for details.\n   */\n  getDeclinedPermissions(): Array<string> {\n    return this.declinedPermissions;\n  }\n\n  getExpiredPermissions(): Array<string> {\n    return this.expiredPermissions;\n  }\n\n  /**\n   * Gets the date at which the token was last refreshed. Since tokens expire, the Facebook SDK\n   * will attempt to renew them periodically. The value is the number of milliseconds since\n   * Jan. 1, 1970, midnight GMT.\n   */\n  getLastRefresh(): number {\n    return this.lastRefreshTime;\n  }\n\n  getDataAccessExpiration(): number {\n    return this.dataAccessExpirationTime;\n  }\n\n  /**\n   * Gets the ID of the Facebook Application associated with this access token.\n   */\n  getApplicationId(): string {\n    return this.applicationID;\n  }\n\n  /**\n   * Gets user ID associated with this access token.\n   */\n  getUserId(): string {\n    return this.userID;\n  }\n}\n\nmodule.exports = FBAccessToken;\n"]},"metadata":{},"sourceType":"script"}