{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _EventEmitter = _interopRequireDefault(require(\"react-native-web/dist/vendor/react-native/emitter/EventEmitter\"));\n\nvar _RCTDeviceEventEmitter = _interopRequireDefault(require(\"react-native-web/dist/vendor/react-native/NativeEventEmitter/RCTDeviceEventEmitter\"));\n\nvar SyntheticPlatformEmitter = function () {\n  function SyntheticPlatformEmitter() {\n    (0, _classCallCheck2.default)(this, SyntheticPlatformEmitter);\n    this._emitter = new _EventEmitter.default(_RCTDeviceEventEmitter.default.sharedSubscriber);\n  }\n\n  (0, _createClass2.default)(SyntheticPlatformEmitter, [{\n    key: \"emit\",\n    value: function emit(eventName, props) {\n      this._emitter.emit(eventName, props);\n    }\n  }]);\n  return SyntheticPlatformEmitter;\n}();\n\nvar _default = new SyntheticPlatformEmitter();\n\nexports.default = _default;","map":{"version":3,"sources":["emitter-polyfill.ts"],"names":["SyntheticPlatformEmitter","_emitter","RCTDeviceEventEmitter","eventName","props"],"mappings":";;;;;;;;;;;AAIA;;AAEA;;AAMMA,IAAAA,wB;;;SACJC,Q,GAAW,IAAA,qBAAA,CAAoBC,+BAApB,gBAAA,C;;;;;yBAENC,S,EAAmBC,K,EAAkB;AACxC,WAAA,QAAA,CAAA,IAAA,CAAA,SAAA,EAAA,KAAA;;;;AAIJ,C,EARMJ;;eAQS,IAAf,wBAAe,E","sourcesContent":["// Copyright 2018-present 650 Industries. All rights reserved.\n// Polyfill the @unimodules/react-native-adapter used for Expo web.\n\n// @ts-ignore: react-native-web is a peer dependency\nimport RCTEventEmitter from 'react-native-web/dist/vendor/react-native/emitter/EventEmitter';\n// @ts-ignore: react-native-web is a peer dependency\nimport RCTDeviceEventEmitter from 'react-native-web/dist/vendor/react-native/NativeEventEmitter/RCTDeviceEventEmitter';\n\n/**\n * This emitter is used for sending synthetic native events to listeners\n * registered in the API layer with `NativeEventEmitter`.\n */\nclass SyntheticPlatformEmitter {\n  _emitter = new RCTEventEmitter(RCTDeviceEventEmitter.sharedSubscriber);\n\n  emit(eventName: string, props: any): void {\n    this._emitter.emit(eventName, props);\n  }\n}\n\nexport default new SyntheticPlatformEmitter();\n"]},"metadata":{},"sourceType":"script"}