{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statusCodes = exports.GoogleSigninSingleton = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar RNGoogleSignin = _reactNative.NativeModules.RNGoogleSignin;\nvar IS_IOS = _reactNative.Platform.OS === 'ios';\n\nvar GoogleSignin = function () {\n  function GoogleSignin() {\n    (0, _classCallCheck2.default)(this, GoogleSignin);\n\n    if (__DEV__ && !RNGoogleSignin) {\n      console.error(\"RN GoogleSignin native module is not correctly linked. Please read the readme, setup and troubleshooting instructions carefully or try manual linking. If you're using Expo, please use expo-google-sign-in. This is because Expo does not support custom native modules.\");\n    }\n  }\n\n  (0, _createClass2.default)(GoogleSignin, [{\n    key: \"signIn\",\n    value: function signIn() {\n      return _regenerator.default.async(function signIn$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap(this.configPromise);\n\n            case 2:\n              _context.next = 4;\n              return _regenerator.default.awrap(RNGoogleSignin.signIn());\n\n            case 4:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"hasPlayServices\",\n    value: function hasPlayServices() {\n      var options,\n          _args2 = arguments;\n      return _regenerator.default.async(function hasPlayServices$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {\n                showPlayServicesUpdateDialog: true\n              };\n\n              if (!IS_IOS) {\n                _context2.next = 5;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", true);\n\n            case 5:\n              if (!(options && options.showPlayServicesUpdateDialog === undefined)) {\n                _context2.next = 7;\n                break;\n              }\n\n              throw new Error('RNGoogleSignin: Missing property `showPlayServicesUpdateDialog` in options object for `hasPlayServices`');\n\n            case 7:\n              return _context2.abrupt(\"return\", RNGoogleSignin.playServicesAvailable(options.showPlayServicesUpdateDialog));\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (options.offlineAccess && !options.webClientId) {\n        throw new Error('RNGoogleSignin: offline use requires server web ClientID');\n      }\n\n      this.configPromise = RNGoogleSignin.configure(options);\n    }\n  }, {\n    key: \"signInSilently\",\n    value: function signInSilently() {\n      return _regenerator.default.async(function signInSilently$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regenerator.default.awrap(this.configPromise);\n\n            case 2:\n              return _context3.abrupt(\"return\", RNGoogleSignin.signInSilently());\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      return _regenerator.default.async(function signOut$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", RNGoogleSignin.signOut());\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"revokeAccess\",\n    value: function revokeAccess() {\n      return _regenerator.default.async(function revokeAccess$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", RNGoogleSignin.revokeAccess());\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"isSignedIn\",\n    value: function isSignedIn() {\n      return _regenerator.default.async(function isSignedIn$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", RNGoogleSignin.isSignedIn());\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getCurrentUser\",\n    value: function getCurrentUser() {\n      return _regenerator.default.async(function getCurrentUser$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", RNGoogleSignin.getCurrentUser());\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"clearCachedAccessToken\",\n    value: function clearCachedAccessToken(tokenString) {\n      return _regenerator.default.async(function clearCachedAccessToken$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!(!tokenString || typeof tokenString !== 'string')) {\n                _context8.next = 2;\n                break;\n              }\n\n              return _context8.abrupt(\"return\", Promise.reject('GoogleSignIn: clearCachedAccessToken() expects a string token.'));\n\n            case 2:\n              if (!IS_IOS) {\n                _context8.next = 6;\n                break;\n              }\n\n              _context8.t0 = null;\n              _context8.next = 9;\n              break;\n\n            case 6:\n              _context8.next = 8;\n              return _regenerator.default.awrap(RNGoogleSignin.clearCachedAccessToken(tokenString));\n\n            case 8:\n              _context8.t0 = _context8.sent;\n\n            case 9:\n              return _context8.abrupt(\"return\", _context8.t0);\n\n            case 10:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getTokens\",\n    value: function getTokens() {\n      var tokens, userObject;\n      return _regenerator.default.async(function getTokens$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!IS_IOS) {\n                _context9.next = 7;\n                break;\n              }\n\n              _context9.next = 3;\n              return _regenerator.default.awrap(RNGoogleSignin.getTokens());\n\n            case 3:\n              tokens = _context9.sent;\n              return _context9.abrupt(\"return\", tokens);\n\n            case 7:\n              _context9.next = 9;\n              return _regenerator.default.awrap(RNGoogleSignin.getTokens());\n\n            case 9:\n              userObject = _context9.sent;\n              return _context9.abrupt(\"return\", {\n                idToken: userObject.idToken,\n                accessToken: userObject.accessToken\n              });\n\n            case 11:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n  return GoogleSignin;\n}();\n\nvar GoogleSigninSingleton = new GoogleSignin();\nexports.GoogleSigninSingleton = GoogleSigninSingleton;\nvar statusCodes = {\n  SIGN_IN_CANCELLED: RNGoogleSignin.SIGN_IN_CANCELLED,\n  IN_PROGRESS: RNGoogleSignin.IN_PROGRESS,\n  PLAY_SERVICES_NOT_AVAILABLE: RNGoogleSignin.PLAY_SERVICES_NOT_AVAILABLE,\n  SIGN_IN_REQUIRED: RNGoogleSignin.SIGN_IN_REQUIRED\n};\nexports.statusCodes = statusCodes;","map":{"version":3,"sources":["C:/Users/Douchington/Desktop/Scripts/ffbeDataExporterMobile/node_modules/@react-native-community/google-signin/src/GoogleSignin.js"],"names":["RNGoogleSignin","NativeModules","IS_IOS","Platform","OS","GoogleSignin","__DEV__","console","error","configPromise","signIn","options","showPlayServicesUpdateDialog","undefined","Error","playServicesAvailable","offlineAccess","webClientId","configure","signInSilently","signOut","revokeAccess","isSignedIn","getCurrentUser","tokenString","Promise","reject","clearCachedAccessToken","getTokens","tokens","userObject","idToken","accessToken","GoogleSigninSingleton","statusCodes","SIGN_IN_CANCELLED","IN_PROGRESS","PLAY_SERVICES_NOT_AVAILABLE","SIGN_IN_REQUIRED"],"mappings":";;;;;;;;;;;;;AAAA;;IAEQA,c,GAAmBC,0B,CAAnBD,c;AAER,IAAME,MAAM,GAAGC,sBAASC,EAAT,KAAgB,KAA/B;;IAEMC,Y;AAGJ,0BAAc;AAAA;;AACZ,QAAIC,OAAO,IAAI,CAACN,cAAhB,EAAgC;AAC9BO,MAAAA,OAAO,CAACC,KAAR;AAGD;AACF;;;;;;;;;;gDAGO,KAAKC,a;;;;gDACET,cAAc,CAACU,MAAf,E;;;;;;;;;;;;;;;;;;;;;AAGOC,cAAAA,O,8DAAU;AAAEC,gBAAAA,4BAA4B,EAAE;AAAhC,e;;mBAC1BV,M;;;;;gDACK,I;;;oBAEHS,OAAO,IAAIA,OAAO,CAACC,4BAAR,KAAyCC,S;;;;;oBAChD,IAAIC,KAAJ,CACJ,yGADI,C;;;gDAIDd,cAAc,CAACe,qBAAf,CAAqCJ,OAAO,CAACC,4BAA7C,C;;;;;;;;;;;gCAIa;AAAA,UAAdD,OAAc,uEAAJ,EAAI;;AACtB,UAAIA,OAAO,CAACK,aAAR,IAAyB,CAACL,OAAO,CAACM,WAAtC,EAAmD;AACjD,cAAM,IAAIH,KAAJ,CAAU,0DAAV,CAAN;AACD;;AAED,WAAKL,aAAL,GAAqBT,cAAc,CAACkB,SAAf,CAAyBP,OAAzB,CAArB;AACD;;;;;;;;;gDAGO,KAAKF,a;;;gDACJT,cAAc,CAACmB,cAAf,E;;;;;;;;;;;;;;;;gDAIAnB,cAAc,CAACoB,OAAf,E;;;;;;;;;;;;;;;;gDAIApB,cAAc,CAACqB,YAAf,E;;;;;;;;;;;;;;;;gDAIArB,cAAc,CAACsB,UAAf,E;;;;;;;;;;;;;;;;gDAIAtB,cAAc,CAACuB,cAAf,E;;;;;;;;;;;2CAGoBC,W;;;;;oBACvB,CAACA,WAAD,IAAgB,OAAOA,WAAP,KAAuB,Q;;;;;gDAClCC,OAAO,CAACC,MAAR,CAAe,gEAAf,C;;;mBAEFxB,M;;;;;6BAAS,I;;;;;;gDAAaF,cAAc,CAAC2B,sBAAf,CAAsCH,WAAtC,C;;;;;;;;;;;;;;;;;;;;;;;mBAIzBtB,M;;;;;;gDACmBF,cAAc,CAAC4B,SAAf,E;;;AAAfC,cAAAA,M;gDACCA,M;;;;gDAEkB7B,cAAc,CAAC4B,SAAf,E;;;AAAnBE,cAAAA,U;gDACC;AACLC,gBAAAA,OAAO,EAAED,UAAU,CAACC,OADf;AAELC,gBAAAA,WAAW,EAAEF,UAAU,CAACE;AAFnB,e;;;;;;;;;;;;;AAQN,IAAMC,qBAAqB,GAAG,IAAI5B,YAAJ,EAA9B;;AAEA,IAAM6B,WAAW,GAAG;AACzBC,EAAAA,iBAAiB,EAAEnC,cAAc,CAACmC,iBADT;AAEzBC,EAAAA,WAAW,EAAEpC,cAAc,CAACoC,WAFH;AAGzBC,EAAAA,2BAA2B,EAAErC,cAAc,CAACqC,2BAHnB;AAIzBC,EAAAA,gBAAgB,EAAEtC,cAAc,CAACsC;AAJR,CAApB","sourcesContent":["import { NativeModules, Platform } from 'react-native';\n\nconst { RNGoogleSignin } = NativeModules;\n\nconst IS_IOS = Platform.OS === 'ios';\n\nclass GoogleSignin {\n  configPromise;\n\n  constructor() {\n    if (__DEV__ && !RNGoogleSignin) {\n      console.error(\n        `RN GoogleSignin native module is not correctly linked. Please read the readme, setup and troubleshooting instructions carefully or try manual linking. If you're using Expo, please use expo-google-sign-in. This is because Expo does not support custom native modules.`\n      );\n    }\n  }\n\n  async signIn() {\n    await this.configPromise;\n    return await RNGoogleSignin.signIn();\n  }\n\n  async hasPlayServices(options = { showPlayServicesUpdateDialog: true }) {\n    if (IS_IOS) {\n      return true;\n    } else {\n      if (options && options.showPlayServicesUpdateDialog === undefined) {\n        throw new Error(\n          'RNGoogleSignin: Missing property `showPlayServicesUpdateDialog` in options object for `hasPlayServices`'\n        );\n      }\n      return RNGoogleSignin.playServicesAvailable(options.showPlayServicesUpdateDialog);\n    }\n  }\n\n  configure(options = {}) {\n    if (options.offlineAccess && !options.webClientId) {\n      throw new Error('RNGoogleSignin: offline use requires server web ClientID');\n    }\n\n    this.configPromise = RNGoogleSignin.configure(options);\n  }\n\n  async signInSilently() {\n    await this.configPromise;\n    return RNGoogleSignin.signInSilently();\n  }\n\n  async signOut() {\n    return RNGoogleSignin.signOut();\n  }\n\n  async revokeAccess() {\n    return RNGoogleSignin.revokeAccess();\n  }\n\n  async isSignedIn() {\n    return RNGoogleSignin.isSignedIn();\n  }\n\n  async getCurrentUser() {\n    return RNGoogleSignin.getCurrentUser();\n  }\n\n  async clearCachedAccessToken(tokenString) {\n    if (!tokenString || typeof tokenString !== 'string') {\n      return Promise.reject('GoogleSignIn: clearCachedAccessToken() expects a string token.');\n    }\n    return IS_IOS ? null : await RNGoogleSignin.clearCachedAccessToken(tokenString);\n  }\n\n  async getTokens() {\n    if (IS_IOS) {\n      const tokens = await RNGoogleSignin.getTokens();\n      return tokens;\n    } else {\n      const userObject = await RNGoogleSignin.getTokens();\n      return {\n        idToken: userObject.idToken,\n        accessToken: userObject.accessToken,\n      };\n    }\n  }\n}\n\nexport const GoogleSigninSingleton = new GoogleSignin();\n\nexport const statusCodes = {\n  SIGN_IN_CANCELLED: RNGoogleSignin.SIGN_IN_CANCELLED,\n  IN_PROGRESS: RNGoogleSignin.IN_PROGRESS,\n  PLAY_SERVICES_NOT_AVAILABLE: RNGoogleSignin.PLAY_SERVICES_NOT_AVAILABLE,\n  SIGN_IN_REQUIRED: RNGoogleSignin.SIGN_IN_REQUIRED,\n};\n"]},"metadata":{},"sourceType":"script"}