{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar NativeGraphRequestManager = require('react-native').NativeModules.FBGraphRequest;\n\nfunction _verifyParameters(request) {\n  if (request.config && request.config.parameters) {\n    for (var key in request.config.parameters) {\n      var param = request.config.parameters[key];\n\n      if (typeof param === 'object' && param.string) {\n        continue;\n      }\n\n      throw new Error(\"Unexpected value for parameter '\" + key + \"'. Request parameters \" + \"need to be objects with a 'string' field.\");\n    }\n  }\n}\n\nvar FBGraphRequestManager = function () {\n  function FBGraphRequestManager() {\n    (0, _classCallCheck2.default)(this, FBGraphRequestManager);\n    (0, _defineProperty2.default)(this, \"requestBatch\", void 0);\n    (0, _defineProperty2.default)(this, \"requestCallbacks\", void 0);\n    (0, _defineProperty2.default)(this, \"batchCallback\", void 0);\n    this.requestBatch = [];\n    this.requestCallbacks = [];\n  }\n\n  (0, _createClass2.default)(FBGraphRequestManager, [{\n    key: \"addRequest\",\n    value: function addRequest(request) {\n      _verifyParameters(request);\n\n      this.requestBatch.push(request);\n      this.requestCallbacks.push(request.callback);\n      return this;\n    }\n  }, {\n    key: \"addBatchCallback\",\n    value: function addBatchCallback(callback) {\n      this.batchCallback = callback;\n      return this;\n    }\n  }, {\n    key: \"start\",\n    value: function start(timeout) {\n      var that = this;\n\n      var callback = function callback(error, result, response) {\n        if (response) {\n          that.requestCallbacks.forEach(function (innerCallback, index, array) {\n            if (innerCallback) {\n              innerCallback(response[index][0], response[index][1]);\n            }\n          });\n        }\n\n        if (that.batchCallback) {\n          that.batchCallback(error, result);\n        }\n      };\n\n      NativeGraphRequestManager.start(this.requestBatch, timeout || 0, callback);\n    }\n  }]);\n  return FBGraphRequestManager;\n}();\n\nmodule.exports = FBGraphRequestManager;","map":{"version":3,"sources":["FBGraphRequestManager.js"],"names":["NativeGraphRequestManager","require","request","param","FBGraphRequestManager","_verifyParameters","callback","timeout","that","innerCallback","response","module"],"mappings":"AAuBA;;;;;;;;;;AAEA,IAAMA,yBAAyB,GAAGC,OAAO,CAAPA,cAAO,CAAPA,CAAAA,aAAAA,CAAlC,cAAA;;AAOA,SAAA,iBAAA,CAAA,OAAA,EAAkD;AAChD,MAAIC,OAAO,CAAPA,MAAAA,IAAkBA,OAAO,CAAPA,MAAAA,CAAtB,UAAA,EAAiD;AAC/C,SAAK,IAAL,GAAA,IAAgBA,OAAO,CAAPA,MAAAA,CAAhB,UAAA,EAA2C;AACzC,UAAIC,KAAK,GAAGD,OAAO,CAAPA,MAAAA,CAAAA,UAAAA,CAAZ,GAAYA,CAAZ;;AACA,UAAI,OAAA,KAAA,KAAA,QAAA,IAA6BC,KAAK,CAAtC,MAAA,EAA+C;AAC7C;AAEF;;AAAA,YAAM,IAAA,KAAA,CACJ,qCAAA,GAAA,GAAA,wBAAA,GADF,2CAAM,CAAN;AAOH;AACF;AAEKC;;AAAAA,IAAAA,qB;AAKJ,WAAA,qBAAA,GAAc;AAAA,KAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,qBAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,cAAA,EAAA,KAAA,CAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,kBAAA,EAAA,KAAA,CAAA;AAAA,KAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,eAAA,EAAA,KAAA,CAAA;AACZ,SAAA,YAAA,GAAA,EAAA;AACA,SAAA,gBAAA,GAAA,EAAA;;;;;+BAMSF,O,EAA8C;AACvDG,MAAAA,iBAAiB,CAAjBA,OAAiB,CAAjBA;;AACA,WAAA,YAAA,CAAA,IAAA,CAAA,OAAA;AACA,WAAA,gBAAA,CAAA,IAAA,CAA2BH,OAAO,CAAlC,QAAA;AACA,aAAA,IAAA;;;;qCASAI,Q,EACuB;AACvB,WAAA,aAAA,GAAA,QAAA;AACA,aAAA,IAAA;;;;0BAaIC,O,EAAkB;AACtB,UAAMC,IAAI,GAAV,IAAA;;AACA,UAAMF,QAAQ,GAARA,SAAAA,QAAAA,CAAW,KAAXA,EAAW,MAAXA,EAAW,QAAXA,EAAwC;AAC5C,YAAA,QAAA,EAAc;AACZE,UAAAA,IAAI,CAAJA,gBAAAA,CAAAA,OAAAA,CAA8B,UAAA,aAAA,EAAA,KAAA,EAAA,KAAA,EAAiC;AAC7D,gBAAA,aAAA,EAAmB;AACjBC,cAAAA,aAAa,CAACC,QAAQ,CAARA,KAAQ,CAARA,CAAD,CAACA,CAAD,EAAqBA,QAAQ,CAARA,KAAQ,CAARA,CAAlCD,CAAkCC,CAArB,CAAbD;AAEH;AAJDD,WAAAA;AAMF;;AAAA,YAAIA,IAAI,CAAR,aAAA,EAAwB;AACtBA,UAAAA,IAAI,CAAJA,aAAAA,CAAAA,KAAAA,EAAAA,MAAAA;AAEH;AAXD,OAAA;;AAaAR,MAAAA,yBAAyB,CAAzBA,KAAAA,CAAgC,KAAhCA,YAAAA,EAAmDO,OAAO,IAA1DP,CAAAA,EAAAA,QAAAA;;;;GAzDEI;;AA6DNO,MAAM,CAANA,OAAAA,GAAAA,qBAAAA","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst NativeGraphRequestManager = require('react-native').NativeModules\n  .FBGraphRequest;\n\nimport type GraphRequest from './FBGraphRequest';\n\ntype Callback = (error: ?Object, result: ?Object) => void;\n\nfunction _verifyParameters(request: GraphRequest) {\n  if (request.config && request.config.parameters) {\n    for (var key in request.config.parameters) {\n      var param = request.config.parameters[key];\n      if (typeof param === 'object' && param.string) {\n        continue;\n      }\n      throw new Error(\n        \"Unexpected value for parameter '\" +\n          key +\n          \"'. Request parameters \" +\n          \"need to be objects with a 'string' field.\",\n      );\n    }\n  }\n}\n\nclass FBGraphRequestManager {\n  requestBatch: Array<GraphRequest>;\n  requestCallbacks: Array<?Callback>;\n  batchCallback: Callback;\n\n  constructor() {\n    this.requestBatch = [];\n    this.requestCallbacks = [];\n  }\n\n  /**\n   * Add a graph request.\n   */\n  addRequest(request: GraphRequest): FBGraphRequestManager {\n    _verifyParameters(request);\n    this.requestBatch.push(request);\n    this.requestCallbacks.push(request.callback);\n    return this;\n  }\n\n  /**\n   * Add call back to the GraphRequestManager. Only one callback can be added.\n   * Note that invocation of the batch callback does not indicate success of every\n   * graph request made, only that the entire batch has finished executing.\n   */\n  addBatchCallback(\n    callback: (error: ?Object, result: ?Object) => void,\n  ): FBGraphRequestManager {\n    this.batchCallback = callback;\n    return this;\n  }\n\n  /**\n   * Executes requests in a batch.\n   * Note that when there's an issue with network connection the batch callback\n   * behavior differs in Android and iOS.\n   * On iOS, the batch callback returns an error if the batch fails with a network error.\n   * On Android, the batch callback always returns {\"result\": \"batch finished executing\"}\n   * after the batch time out. This is because detecting network status requires\n   * extra permission and it's unncessary for the sdk. Instead, you can use the NetInfo module\n   * in react-native to get the network status.\n   */\n  start(timeout: ?number) {\n    const that = this;\n    const callback = (error, result, response) => {\n      if (response) {\n        that.requestCallbacks.forEach((innerCallback, index, array) => {\n          if (innerCallback) {\n            innerCallback(response[index][0], response[index][1]);\n          }\n        });\n      }\n      if (that.batchCallback) {\n        that.batchCallback(error, result);\n      }\n    };\n\n    NativeGraphRequestManager.start(this.requestBatch, timeout || 0, callback);\n  }\n}\n\nmodule.exports = FBGraphRequestManager;\n"]},"metadata":{},"sourceType":"script"}