{"ast":null,"code":"'use strict';\n\nvar _require = require('react-native'),\n    NativeModules = _require.NativeModules,\n    Platform = _require.Platform;\n\nvar LoginManager = NativeModules.FBLoginManager;\nmodule.exports = {\n  logInWithPermissions: function logInWithPermissions(permissions) {\n    return LoginManager.logInWithPermissions(permissions);\n  },\n  getLoginBehavior: function getLoginBehavior() {\n    if (Platform.OS === 'ios') {\n      return Promise.resolve('browser');\n    } else {\n      return LoginManager.getLoginBehavior();\n    }\n  },\n  setLoginBehavior: function setLoginBehavior(loginBehavior) {\n    if (Platform.OS === 'ios') {\n      return;\n    }\n\n    LoginManager.setLoginBehavior(loginBehavior);\n  },\n  getDefaultAudience: function getDefaultAudience() {\n    return LoginManager.getDefaultAudience();\n  },\n  setDefaultAudience: function setDefaultAudience(defaultAudience) {\n    LoginManager.setDefaultAudience(defaultAudience);\n  },\n  logOut: function logOut() {\n    LoginManager.logOut();\n  }\n};","map":{"version":3,"sources":["FBLoginManager.js"],"names":["NativeModules","Platform","require","LoginManager","module","logInWithPermissions","getLoginBehavior","Promise","setLoginBehavior","getDefaultAudience","setDefaultAudience","logOut"],"mappings":"AAsBA;;eAEkCE,OAAO,CAAA,cAAA,C;IAAlCF,a,YAAAA,a;IAAeC,Q,YAAAA,Q;;AACtB,IAAME,YAAY,GAAGH,aAAa,CAAlC,cAAA;AAsCAI,MAAM,CAANA,OAAAA,GAAiB;AAIfC,EAAAA,oBAJe,EAAA,SAAA,oBAAA,CAAA,WAAA,EAIwD;AACrE,WAAOF,YAAY,CAAZA,oBAAAA,CAAP,WAAOA,CAAP;AALa,GAAA;AAWfG,EAAAA,gBAXe,EAAA,SAAA,gBAAA,GAW4B;AACzC,QAAIL,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;AACzB,aAAOM,OAAO,CAAPA,OAAAA,CAAP,SAAOA,CAAP;AADF,KAAA,MAEO;AACL,aAAOJ,YAAY,CAAnB,gBAAOA,EAAP;AAEH;AAjBc,GAAA;AAsBfK,EAAAA,gBAtBe,EAAA,SAAA,gBAAA,CAAA,aAAA,EAsBgC;AAC7C,QAAIP,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;AACzB;AAEFE;;AAAAA,IAAAA,YAAY,CAAZA,gBAAAA,CAAAA,aAAAA;AA1Ba,GAAA;AAgCfM,EAAAA,kBAhCe,EAAA,SAAA,kBAAA,GAgCgC;AAC7C,WAAON,YAAY,CAAnB,kBAAOA,EAAP;AAjCa,GAAA;AAuCfO,EAAAA,kBAvCe,EAAA,SAAA,kBAAA,CAAA,eAAA,EAuCsC;AACnDP,IAAAA,YAAY,CAAZA,kBAAAA,CAAAA,eAAAA;AAxCa,GAAA;AA8CfQ,EAAAA,MA9Ce,EAAA,SAAA,MAAA,GA8CN;AACPR,IAAAA,YAAY,CAAZA,MAAAA;AA/CJC;AAAiB,CAAjBA","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst {NativeModules, Platform} = require('react-native');\nconst LoginManager = NativeModules.FBLoginManager;\n/**\n * Indicates which default audience to use for sessions that post data to Facebook.\n */\nexport type DefaultAudience =\n  // Indicates that the user's friends are able to see posts made by the application.\n  | 'friends'\n  // Indicates that all Facebook users are able to see posts made by the application.\n  | 'everyone'\n  // Indicates that only the user is able to see posts made by the application.\n  | 'only_me';\nexport type LoginBehavior = LoginBehaviorIOS | LoginBehaviorAndroid;\n/**\n * Indicate how Facebook Login should be attempted on Android.\n */\nexport type LoginBehaviorAndroid =\n  // Attempt login in using the Facebook App, and if that does not work fall back to web dialog auth.\n  | 'native_with_fallback'\n  // Only attempt to login using the Facebook App.\n  | 'native_only'\n  // Only the web dialog auth should be used.\n  | 'web_only';\n/**\n * Indicate how Facebook Login should be attempted on iOS.\n */\nexport type LoginBehaviorIOS =\n  // Attempts log in through the Safari browser.\n  // This is the only behavior supported by the native sdk.\n  'browser';\n/**\n * Shows the results of a login operation.\n */\nexport type LoginResult = {\n  isCancelled: boolean,\n  grantedPermissions?: Array<string>,\n  declinedPermissions?: Array<string>,\n};\n\nmodule.exports = {\n  /**\n   * Logs the user in with the requested permissions.\n   */\n  logInWithPermissions(permissions: Array<string>): Promise<LoginResult> {\n    return LoginManager.logInWithPermissions(permissions);\n  },\n\n  /**\n   * Getter for the login behavior.\n   */\n  getLoginBehavior(): Promise<LoginBehavior> {\n    if (Platform.OS === 'ios') {\n      return Promise.resolve('browser');\n    } else {\n      return LoginManager.getLoginBehavior();\n    }\n  },\n\n  /**\n   * Setter for the login behavior.\n   */\n  setLoginBehavior(loginBehavior: LoginBehavior) {\n    if (Platform.OS === 'ios') {\n      return;\n    }\n    LoginManager.setLoginBehavior(loginBehavior);\n  },\n\n  /**\n   * Getter for the default audience.\n   */\n  getDefaultAudience(): Promise<DefaultAudience> {\n    return LoginManager.getDefaultAudience();\n  },\n\n  /**\n   * Setter for the default audience.\n   */\n  setDefaultAudience(defaultAudience: DefaultAudience) {\n    LoginManager.setDefaultAudience(defaultAudience);\n  },\n\n  /**\n   * Logs out the user.\n   */\n  logOut() {\n    LoginManager.logOut();\n  },\n};\n"]},"metadata":{},"sourceType":"script"}