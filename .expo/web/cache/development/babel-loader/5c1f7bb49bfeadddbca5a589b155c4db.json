{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.usePermissions = usePermissions;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _Permissions = require(\"./Permissions\");\n\nfunction usePermissions(type) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _useState = (0, _react.useState)(),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _options$ask = options.ask,\n      ask = _options$ask === void 0 ? false : _options$ask,\n      _options$get = options.get,\n      get = _options$get === void 0 ? true : _options$get;\n  var types = Array.isArray(type) ? type : [type];\n  var askPermissions = (0, _react.useCallback)(function () {\n    return _Permissions.askAsync.apply(void 0, (0, _toConsumableArray2.default)(types)).then(setData);\n  }, [type]);\n  var getPermissions = (0, _react.useCallback)(function () {\n    return _Permissions.getAsync.apply(void 0, (0, _toConsumableArray2.default)(types)).then(setData);\n  }, [type]);\n  (0, _react.useEffect)(function () {\n    if (ask) {\n      askPermissions();\n    }\n\n    if (!ask && get) {\n      getPermissions();\n    }\n  }, [ask, askPermissions, get, getPermissions]);\n  return [data, askPermissions, getPermissions];\n}","map":{"version":3,"sources":["../src/PermissionsHooks.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAmBM,SAAU,cAAV,CACJ,IADI,EAE4B;AAAA,MAAhC,OAAgC,uEAAF,EAAE;;AAAA,kBAER,sBAFQ;AAAA;AAAA,MAEzB,IAFyB;AAAA,MAEnB,OAFmB;;AAAA,qBAGI,OAHJ,CAGxB,GAHwB;AAAA,MAGxB,GAHwB,6BAGlB,KAHkB;AAAA,qBAGI,OAHJ,CAGX,GAHW;AAAA,MAGX,GAHW,6BAGL,IAHK;AAIhC,MAAM,KAAK,GAAG,KAAK,CAAC,OAAN,CAAc,IAAd,IAAsB,IAAtB,GAA6B,CAAC,IAAD,CAA3C;AAMA,MAAM,cAAc,GAAG,wBAAY;AAAA,WAAM,qEAAY,KAAZ,GAAmB,IAAnB,CAAwB,OAAxB,CAAN;AAAA,GAAZ,EAAoD,CAAC,IAAD,CAApD,CAAvB;AAEA,MAAM,cAAc,GAAG,wBAAY;AAAA,WAAM,qEAAY,KAAZ,GAAmB,IAAnB,CAAwB,OAAxB,CAAN;AAAA,GAAZ,EAAoD,CAAC,IAAD,CAApD,CAAvB;AAEA,wBAAU,YAAK;AACb,QAAI,GAAJ,EAAS;AACP,MAAA,cAAc;AACf;;AAED,QAAI,CAAC,GAAD,IAAQ,GAAZ,EAAiB;AACf,MAAA,cAAc;AACf;AACF,GARD,EAQG,CAAC,GAAD,EAAM,cAAN,EAAsB,GAAtB,EAA2B,cAA3B,CARH;AAUA,SAAO,CAAC,IAAD,EAAO,cAAP,EAAuB,cAAvB,CAAP;AACD","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\nimport { askAsync, getAsync } from './Permissions';\nimport { PermissionResponse, PermissionType } from './Permissions.types';\n\n/**\n * Get or ask permission for protected functionality within the app.\n * It returns the permission response after fetching or asking it.\n * The hook fetches the permissions when rendered, by default.\n * To ask the user permission, use the `askPermission` callback or `ask` option.\n *\n * @see https://docs.expo.io/versions/latest/sdk/permissions/\n * @example\n * ```tsx\n * const [permission, askPermission, getPermission] = usePermissions(Permissions.CAMERA);\n *\n * return permission?.granted\n *   ? <Camera ... />\n *   : <Button onPress={askPermission} />;\n * ```\n */\nexport function usePermissions(\n  type: PermissionType | PermissionType[],\n  options: PermissionsOptions = {}\n): [PermissionResponse | undefined, () => Promise<void>, () => Promise<void>] {\n  const [data, setData] = useState<PermissionResponse>();\n  const { ask = false, get = true } = options;\n  const types = Array.isArray(type) ? type : [type];\n\n  // note: its intentional to listen to `type`, not `types`.\n  // when `type` is casted to an array, it possible creates a new one on every render.\n  // to prevent unnecessary function instances we need to listen to the \"raw\" value.\n\n  const askPermissions = useCallback(() => askAsync(...types).then(setData), [type]);\n\n  const getPermissions = useCallback(() => getAsync(...types).then(setData), [type]);\n\n  useEffect(() => {\n    if (ask) {\n      askPermissions();\n    }\n\n    if (!ask && get) {\n      getPermissions();\n    }\n  }, [ask, askPermissions, get, getPermissions]);\n\n  return [data, askPermissions, getPermissions];\n}\n\nexport interface PermissionsOptions {\n  /** If it should ask the permissions when mounted, defaults to `false` */\n  ask?: boolean;\n  /** If it should fetch information about the permissions when mounted, defaults to `true` */\n  get?: boolean;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}