{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.guardPermission = guardPermission;\nexports.getExponentPushTokenAsync = getExponentPushTokenAsync;\nexports.getDevicePushTokenAsync = getDevicePushTokenAsync;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _core = require(\"@unimodules/core\");\n\nvar _expoConstants = _interopRequireDefault(require(\"expo-constants\"));\n\nvar _reactNative = require(\"react-native\");\n\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new Error('The Notification API is not available on this device.');\n  }\n\n  if (!navigator.serviceWorker) {\n    throw new Error('Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');\n  }\n\n  if (Notification.permission !== 'granted') {\n    throw new Error('Cannot use Notifications without permissions. Please request permissions with `expo-permissions`');\n  }\n}\n\nfunction getExponentPushTokenAsync() {\n  var data, experienceId, tokenArguments, response;\n  return _regenerator.default.async(function getExponentPushTokenAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(!_expoConstants.default.manifest.owner || !_expoConstants.default.manifest.slug)) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new _core.CodedError('E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `owner` and `slug` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');\n\n        case 2:\n          _context.next = 4;\n          return _regenerator.default.awrap(_subscribeUserToPushAsync());\n\n        case 4:\n          data = _context.sent;\n          experienceId = \"@\" + _expoConstants.default.manifest.owner + \"/\" + _expoConstants.default.manifest.slug;\n          tokenArguments = {\n            deviceId: _expoConstants.default.installationId,\n            experienceId: experienceId,\n            appId: experienceId,\n            deviceToken: JSON.stringify(data),\n            type: 'web'\n          };\n          _context.next = 9;\n          return _regenerator.default.awrap(fetch('https://exp.host/--/api/v2/push/getExpoPushToken', {\n            method: 'POST',\n            body: JSON.stringify(tokenArguments)\n          }).then(function (response) {\n            if (!response.ok) {\n              throw new Error(response.statusText);\n            }\n\n            return response;\n          }).then(function (response) {\n            return response.json();\n          }).catch(function (error) {\n            throw new _core.CodedError('E_NOTIFICATIONS_TOKEN_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with Expo. (' + error + ')');\n          }));\n\n        case 9:\n          response = _context.sent;\n          return _context.abrupt(\"return\", response.data.expoPushToken);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getDevicePushTokenAsync() {\n  var data;\n  return _regenerator.default.async(function getDevicePushTokenAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regenerator.default.awrap(_subscribeUserToPushAsync());\n\n        case 2:\n          data = _context2.sent;\n          return _context2.abrupt(\"return\", {\n            type: _reactNative.Platform.OS,\n            data: data\n          });\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction _subscribeUserToPushAsync() {\n  var registration, subscribeOptions, pushSubscription, pushSubscriptionJson, subscriptionObject, notificationIcon;\n  return _regenerator.default.async(function _subscribeUserToPushAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(!_expoConstants.default.manifest.notification || !_expoConstants.default.manifest.notification.vapidPublicKey)) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new _core.CodedError('E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');\n\n        case 2:\n          guardPermission();\n          _context3.next = 5;\n          return _regenerator.default.awrap(navigator.serviceWorker.register('/expo-service-worker.js'));\n\n        case 5:\n          registration = _context3.sent;\n          _context3.next = 8;\n          return _regenerator.default.awrap(navigator.serviceWorker.ready);\n\n        case 8:\n          if (registration.active) {\n            _context3.next = 10;\n            break;\n          }\n\n          throw new Error('Notifications might not be working because the service worker API is not active.');\n\n        case 10:\n          subscribeOptions = {\n            userVisibleOnly: true,\n            applicationServerKey: _urlBase64ToUint8Array(_expoConstants.default.manifest.notification.vapidPublicKey)\n          };\n          _context3.next = 13;\n          return _regenerator.default.awrap(registration.pushManager.subscribe(subscribeOptions).catch(function (error) {\n            throw new _core.CodedError('E_NOTIFICATIONS_PUSH_WEB_TOKEN_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with the browser endpoint. (' + error + ')');\n          }));\n\n        case 13:\n          pushSubscription = _context3.sent;\n          pushSubscriptionJson = pushSubscription.toJSON();\n          subscriptionObject = {\n            endpoint: pushSubscriptionJson.endpoint,\n            keys: {\n              p256dh: pushSubscriptionJson.keys.p256dh,\n              auth: pushSubscriptionJson.keys.auth\n            }\n          };\n          notificationIcon = (_expoConstants.default.manifest.notification || {}).icon;\n          _context3.next = 19;\n          return _regenerator.default.awrap(registration.active.postMessage(JSON.stringify({\n            fromExpoWebClient: {\n              notificationIcon: notificationIcon\n            }\n          })));\n\n        case 19:\n          return _context3.abrupt(\"return\", subscriptionObject);\n\n        case 20:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction _urlBase64ToUint8Array(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}","map":{"version":3,"sources":["../../src/Notifications/ExponentNotificationsHelper.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport { Platform } from 'react-native';\n\nexport function guardPermission() {\n  if (!('Notification' in window)) {\n    throw new Error('The Notification API is not available on this device.');\n  }\n  if (!navigator.serviceWorker) {\n    throw new Error(\n      'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new Error(\n      'Cannot use Notifications without permissions. Please request permissions with `expo-permissions`'\n    );\n  }\n}\n\nexport async function getExponentPushTokenAsync(): Promise<string> {\n  if (!Constants.manifest.owner || !Constants.manifest.slug) {\n    throw new CodedError(\n      'E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `owner` and `slug` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n    );\n  }\n\n  const data = await _subscribeUserToPushAsync();\n  const experienceId = `@${Constants.manifest.owner}/${Constants.manifest.slug}`;\n  const tokenArguments: { [key: string]: string } = {\n    deviceId: Constants.installationId,\n    experienceId,\n    // Also uses `experienceId` for `appId` because there's no `appId` for web.\n    appId: experienceId,\n    deviceToken: JSON.stringify(data),\n    type: 'web',\n  };\n\n  const response = await fetch('https://exp.host/--/api/v2/push/getExpoPushToken', {\n    method: 'POST',\n    body: JSON.stringify(tokenArguments),\n  })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response;\n    })\n    .then(response => response.json())\n    .catch(error => {\n      throw new CodedError(\n        'E_NOTIFICATIONS_TOKEN_REGISTRATION_FAILED',\n        'The device was unable to register for remote notifications with Expo. (' + error + ')'\n      );\n    });\n\n  return response.data.expoPushToken;\n}\n\nexport async function getDevicePushTokenAsync(): Promise<{ type: string; data: object }> {\n  const data = await _subscribeUserToPushAsync();\n  return { type: Platform.OS, data };\n}\n\nasync function _subscribeUserToPushAsync(): Promise<object> {\n  if (!Constants.manifest.notification || !Constants.manifest.notification.vapidPublicKey) {\n    throw new CodedError(\n      'E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n    );\n  }\n  guardPermission();\n\n  const registration = await navigator.serviceWorker.register('/expo-service-worker.js');\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new Error(\n      'Notifications might not be working because the service worker API is not active.'\n    );\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: _urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey),\n  };\n  const pushSubscription = await registration.pushManager\n    .subscribe(subscribeOptions)\n    .catch(error => {\n      throw new CodedError(\n        'E_NOTIFICATIONS_PUSH_WEB_TOKEN_REGISTRATION_FAILED',\n        'The device was unable to register for remote notifications with the browser endpoint. (' +\n          error +\n          ')'\n      );\n    });\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n\n  // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n  const notificationIcon = (Constants.manifest.notification || {}).icon;\n  await registration.active.postMessage(\n    JSON.stringify({ fromExpoWebClient: { notificationIcon } })\n  );\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}